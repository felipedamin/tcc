package br.usp.larc;

import br.usp.larc.Benchmark.ApacheCommons.KeyValue.DefaultKeyValue;
import br.usp.larc.Benchmark.ApacheCommons.KeyValue.DefaultKeyValueInstrumented;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.Fork;
import org.openjdk.jmh.annotations.Measurement;
import org.openjdk.jmh.annotations.Warmup;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;

import java.util.Map;
import java.util.concurrent.TimeUnit;

@Fork(1)
@Warmup(iterations = 1)
@Measurement(iterations = 5)
public class KeyValueBenchmark {

    // private static final int ITERATIONS = 100000;

    @Benchmark
    @BenchmarkMode({Mode.Throughput, Mode.AverageTime})
    @OutputTimeUnit(TimeUnit.MICROSECONDS)
    public boolean isNotEqualInstrumented() {
        DefaultKeyValueInstrumented<String, Integer> keyValue = new DefaultKeyValueInstrumented<>("key", 123);
        DefaultKeyValueInstrumented<String, Integer> otherKeyValue = new DefaultKeyValueInstrumented<>("key2", 1234);

        return keyValue.equals(otherKeyValue);
    }

    @Benchmark
    @BenchmarkMode({Mode.Throughput, Mode.AverageTime})
    @OutputTimeUnit(TimeUnit.MICROSECONDS)
    public boolean isEqualInstrumented() {
        DefaultKeyValueInstrumented<String, Integer> keyValue = new DefaultKeyValueInstrumented<>("key", 123);
        DefaultKeyValueInstrumented<String, Integer> sameKeyValue = new DefaultKeyValueInstrumented<>("key", 123);

        return keyValue.equals(sameKeyValue);
    }

    @Benchmark
    @BenchmarkMode({Mode.Throughput, Mode.AverageTime})
    @OutputTimeUnit(TimeUnit.MICROSECONDS)
    public boolean isNotEqual() {
        DefaultKeyValue<String, Integer> keyValue = new DefaultKeyValue<>("key", 123);        
        DefaultKeyValue<String, Integer> otherKeyValue = new DefaultKeyValue<>("key2", 1234);

        return keyValue.equals(otherKeyValue);
    }

    @Benchmark
    @BenchmarkMode({Mode.Throughput, Mode.AverageTime})
    @OutputTimeUnit(TimeUnit.MICROSECONDS)
    public boolean isEqual() {
        DefaultKeyValue<String, Integer> keyValue = new DefaultKeyValue<>("key", 123);        
        DefaultKeyValue<String, Integer> sameKeyValue = new DefaultKeyValue<>("key", 123);

        return keyValue.equals(sameKeyValue);
    }

    public static void main(String[] args) {
        KeyValueBenchmark benchmark = new KeyValueBenchmark();
        benchmark.isEqual();
        benchmark.isEqualInstrumented();
        benchmark.isNotEqual();
        benchmark.isNotEqualInstrumented();
    }
}